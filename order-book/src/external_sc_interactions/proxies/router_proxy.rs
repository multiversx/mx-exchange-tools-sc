// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct RouterProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for RouterProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = RouterProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        RouterProxyMethods { wrapped_tx: tx }
    }
}

pub struct RouterProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> RouterProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<OptionalValue<ManagedAddress<Env::Api>>>,
    >(
        self,
        pair_template_address_opt: Arg0,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&pair_template_address_opt)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> RouterProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> RouterProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn pause<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("pause")
            .argument(&address)
            .original_result()
    }

    pub fn resume<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("resume")
            .argument(&address)
            .original_result()
    }

    pub fn create_pair_endpoint<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg2: ProxyArg<ManagedAddress<Env::Api>>,
        Arg3: ProxyArg<OptionalValue<MultiValue2<u64, u64>>>,
        Arg4: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        first_token_id: Arg0,
        second_token_id: Arg1,
        initial_liquidity_adder: Arg2,
        opt_fee_percents: Arg3,
        admins: Arg4,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("createPair")
            .argument(&first_token_id)
            .argument(&second_token_id)
            .argument(&initial_liquidity_adder)
            .argument(&opt_fee_percents)
            .argument(&admins)
            .original_result()
    }

    pub fn upgrade_pair_endpoint<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        first_token_id: Arg0,
        second_token_id: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("upgradePair")
            .argument(&first_token_id)
            .argument(&second_token_id)
            .original_result()
    }

    pub fn issue_lp_token<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        pair_address: Arg0,
        lp_token_display_name: Arg1,
        lp_token_ticker: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("issueLpToken")
            .argument(&pair_address)
            .argument(&lp_token_display_name)
            .argument(&lp_token_ticker)
            .original_result()
    }

    pub fn set_local_roles<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        pair_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setLocalRoles")
            .argument(&pair_address)
            .original_result()
    }

    pub fn remove_pair<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        first_token_id: Arg0,
        second_token_id: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removePair")
            .argument(&first_token_id)
            .argument(&second_token_id)
            .original_result()
    }

    pub fn set_fee_on<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        pair_address: Arg0,
        fee_to_address: Arg1,
        fee_token: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setFeeOn")
            .argument(&pair_address)
            .argument(&fee_to_address)
            .argument(&fee_token)
            .original_result()
    }

    pub fn set_fee_off<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        pair_address: Arg0,
        fee_to_address: Arg1,
        fee_token: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setFeeOff")
            .argument(&pair_address)
            .argument(&fee_to_address)
            .argument(&fee_token)
            .original_result()
    }

    pub fn claim_developer_rewards_pairs<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        pairs: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimDeveloperRewardsPairs")
            .argument(&pairs)
            .original_result()
    }

    pub fn set_pair_creation_enabled<
        Arg0: ProxyArg<bool>,
    >(
        self,
        enabled: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setPairCreationEnabled")
            .argument(&enabled)
            .original_result()
    }

    pub fn pair_creation_enabled(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPairCreationEnabled")
            .original_result()
    }

    pub fn state(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getState")
            .original_result()
    }

    pub fn owner(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getOwner")
            .original_result()
    }

    pub fn set_temporary_owner_period<
        Arg0: ProxyArg<u64>,
    >(
        self,
        period_blocks: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setTemporaryOwnerPeriod")
            .argument(&period_blocks)
            .original_result()
    }

    pub fn set_pair_template_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setPairTemplateAddress")
            .argument(&address)
            .original_result()
    }

    pub fn pair_template_address(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPairTemplateAddress")
            .original_result()
    }

    pub fn temporary_owner_period(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTemporaryOwnerPeriod")
            .original_result()
    }

    pub fn common_tokens_for_user_pairs(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, TokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCommonTokensForUserPairs")
            .original_result()
    }

    pub fn get_all_pairs_addresses(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllPairsManagedAddresses")
            .original_result()
    }

    pub fn get_all_token_pairs(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, PairTokens<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllPairTokens")
            .original_result()
    }

    pub fn get_all_pair_contract_metadata(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, PairContractMetadata<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllPairContractMetadata")
            .original_result()
    }

    pub fn get_pair<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        first_token_id: Arg0,
        second_token_id: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPair")
            .argument(&first_token_id)
            .argument(&second_token_id)
            .original_result()
    }

    pub fn clear_pair_temporary_owner_storage(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("clearPairTemporaryOwnerStorage")
            .original_result()
    }

    pub fn multi_pair_swap<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, MultiValue4<ManagedAddress<Env::Api>, ManagedBuffer<Env::Api>, TokenIdentifier<Env::Api>, BigUint<Env::Api>>>>,
    >(
        self,
        swap_operations: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("multiPairSwap")
            .argument(&swap_operations)
            .original_result()
    }

    pub fn config_enable_by_user_parameters<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<u64>,
    >(
        self,
        common_token_id: Arg0,
        locked_token_id: Arg1,
        min_locked_token_value: Arg2,
        min_lock_period_epochs: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("configEnableByUserParameters")
            .argument(&common_token_id)
            .argument(&locked_token_id)
            .argument(&min_locked_token_value)
            .argument(&min_lock_period_epochs)
            .original_result()
    }

    pub fn add_common_tokens_for_user_pairs<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, TokenIdentifier<Env::Api>>>,
    >(
        self,
        tokens: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addCommonTokensForUserPairs")
            .argument(&tokens)
            .original_result()
    }

    pub fn remove_common_tokens_for_user_pairs<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, TokenIdentifier<Env::Api>>>,
    >(
        self,
        tokens: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeCommonTokensForUserPairs")
            .argument(&tokens)
            .original_result()
    }

    pub fn set_swap_enabled_by_user<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        pair_address: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("setSwapEnabledByUser")
            .argument(&pair_address)
            .original_result()
    }

    pub fn try_get_config<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        token_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, EnableSwapByUserConfig<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getEnableSwapByUserConfig")
            .argument(&token_id)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, PartialEq)]
pub struct PairTokens<Api>
where
    Api: ManagedTypeApi,
{
    pub first_token_id: TokenIdentifier<Api>,
    pub second_token_id: TokenIdentifier<Api>,
}

#[type_abi]
#[derive(ManagedVecItem, TopEncode, TopDecode, PartialEq)]
pub struct PairContractMetadata<Api>
where
    Api: ManagedTypeApi,
{
    pub first_token_id: TokenIdentifier<Api>,
    pub second_token_id: TokenIdentifier<Api>,
    pub address: ManagedAddress<Api>,
}

#[type_abi]
#[derive(TopEncode)]
pub struct CreatePairEvent<Api>
where
    Api: ManagedTypeApi,
{
    pub caller: ManagedAddress<Api>,
    pub first_token_id: TokenIdentifier<Api>,
    pub second_token_id: TokenIdentifier<Api>,
    pub total_fee_percent: u64,
    pub special_fee_percent: u64,
    pub pair_address: ManagedAddress<Api>,
    pub block: u64,
    pub epoch: u64,
    pub timestamp: u64,
}

#[type_abi]
#[derive(TopEncode)]
pub struct UserPairSwapEnabledEvent<Api>
where
    Api: ManagedTypeApi,
{
    pub caller: ManagedAddress<Api>,
    pub first_token_id: TokenIdentifier<Api>,
    pub second_token_id: TokenIdentifier<Api>,
    pub pair_address: ManagedAddress<Api>,
}

#[type_abi]
#[derive(TopEncode)]
pub struct MultiPairSwapEvent<Api>
where
    Api: ManagedTypeApi,
{
    pub caller: ManagedAddress<Api>,
    pub token_in: TokenIdentifier<Api>,
    pub amount_in: BigUint<Api>,
    pub token_out: TokenIdentifier<Api>,
    pub amount_out: BigUint<Api>,
    pub payments_out: ManagedVec<Api, EsdtTokenPayment<Api>>,
    pub block: u64,
    pub epoch: u64,
    pub timestamp: u64,
}

#[type_abi]
#[derive(TopEncode, TopDecode)]
pub struct EnableSwapByUserConfig<Api>
where
    Api: ManagedTypeApi,
{
    pub locked_token_id: TokenIdentifier<Api>,
    pub min_locked_token_value: BigUint<Api>,
    pub min_lock_period_epochs: u64,
}
